var http = require('http')
var url = require('url')
var axios = require('axios')
var fs = require('fs')
var templates = require('./templates')

function genOcorrencias_Movies(ocorrencias){
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Lista de Filmes</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-blue">
              <h1>Lista de Filmes</h1>
            </header>
            
            <div class="w3-container">
                <table class="w3-table w3-striped">
                    <tr>
                        <th>Identificador</th>
                        <th>Nome</th>
                        <th>Ano</th>
                        <th>Género</th>
                        <th>Elenco</th>
                    </tr>
    `
    ocorrencias.forEach( ocorr => {
        pagHTML += `
        <tr>
            <td><a href="/filmes/${ocorr.id}">${ocorr.id}</a></td>
            <td>${ocorr.title}</td>
            <td>${ocorr.year}</td>
            <td>${ocorr.genres}</td>
            <td>${ocorr.cast}</td>
        </tr>
        `
    });
    pagHTML += `
    </table>
            </div>
            
            <footer class="w3-container w3-blue">
              <h5>Generated by a100696 for TPC3 EngWeb</h5>
            </footer>
            
        </div>
    </body>
</html>
    `
    return pagHTML
}

function genOcorrencias_Actors(ocorrencias){
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Lista de Atores</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-blue">
              <h1>Lista de Ocorrências</h1>
            </header>
            
            <div class="w3-container">
                <table class="w3-table w3-striped">
                    <tr>
                        <th>Identificador</th>
                        <th>Nome</th>
                        <th>Filmes protagonizados</th>
                    </tr>
                    `
                    ocorrencias.forEach(ocorr => {
                        pagHTML += `
                        <tr>
                            <td>${ocorr.id}</td>
                            <td>${ocorr.Nome}</td>
                            <td>
                                <ul>
                                ${ocorr.Filmes.map(filme => `
                                    <li>${filme.Nome}</li>
                                `).join('')}
                                </ul>
                            </td>
                        </tr>
                        `
                    });
                pagHTML += `
                </table>
            </div>

            
            <footer class="w3-container w3-blue">
              <h5>Generated by a100696 for TPC3 EngWeb</h5>
            </footer>
            
        </div>
    </body>
</html>
    `
    return pagHTML
}

function genOcorrencias_Genres(ocorrencias){
    pagHTML = `
    <!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8"/>
        <title>Lista de Géneros</title>
        <link rel="stylesheet" href="w3.css"/>
    </head>
    <body>
        <div class="w3-card-4">

            <header class="w3-container w3-blue">
              <h1>Lista de Ocorrências</h1>
            </header>
            
            <div class="w3-container">
            <table class="w3-table w3-striped">
                <tr>
                    <th>Identificador</th>
                    <th>Género</th>
                    <th>Lista de Filmes</th>
                </tr>
                `
                ocorrencias.forEach(ocorr => {
                    pagHTML += `
                    <tr>
                        <td>${ocorr.id}</td>
                        <td>${ocorr.Designacao}</td>
                        <td>
                            <ul>
                            ${ocorr.Filmes.map(filme => `
                                <li>${filme.Nome}</li>
                            `).join('')}
                            </ul>
                        </td>
                    </tr>
                    `
                });
            pagHTML += `
            </table>
        </div>
        
            
            <footer class="w3-container w3-blue">
              <h5>Generated by a100696 for TPC3 EngWeb</h5>
            </footer>
            
        </div>
    </body>
</html>
    `
    return pagHTML
}

http.createServer((req, res) => {
    console.log(req.method + ' ' + req.url) 

    if (req.url == '/'){
        fs.readFile('web.html', (erro, dados) => {
            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
            res.write(dados)
            res.end()
        }
        )
    }
    else if (req.url == '/filmes'){
        axios.get('http://localhost:3000/Movies')
            .then( response => {
                var ocorrencias = response.data
                res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
                res.write(genOcorrencias_Movies(ocorrencias))
                res.end()
            })
            .catch(erro => {
                res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'})
                res.write('<p>Ocorreu um erro: ' + erro + '</p>')
                res.end()
            })
    
    }
    else if (/\/filmes\/[a-f\d]+$/i.test(req.url)) {
        id = req.url.split("/")[2];
        axios.get('http://localhost:3000/Movies/' + id)
            .then(resp => {
                filme = resp.data;
                res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
                res.write(templates.moviePage(filme));
                res.end();
            })
            .catch(erro => {
                res.writeHead(504, {'Content-Type': 'text/html; charset=utf-8'});
                res.write("<p>Não foi possível obter a informação do filme: " + id + "::" + erro + "</p>");
                res.end();
            });
    }
    
    else if (req.url == '/generos'){
        axios.get('http://localhost:3000/Genres')
            .then( response => {
                var ocorrencias = response.data
                res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
                res.write(genOcorrencias_Genres(ocorrencias))
                res.end()
            })
            .catch(erro => {
                res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'})
                res.write('<p>Ocorreu um erro: ' + erro + '</p>')
                res.end()
            })
    
    }
    else if(/\/generos\/(g)[0-9]+$/i.test(req.url)){
        id = req.url.split("/")[2]
        axios.get('http://localhost:3000/Genres/' + id)
            .then(resp => {
                genero = resp.data
                res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
                res.write(templates.genrePage(genero))
                res.end()
            })
            .catch(erro => {
                res.writeHead(504, {'Content-Type': 'text/html; charset=utf-8'})
                res.write("<p>Não foi possível obter a informação do genero: " + id + "::" + erro + "</p>")
                res.end()
            })
    }
    else if (req.url == '/atores'){
        axios.get('http://localhost:3000/Actors')
            .then( response => {
                var ocorrencias = response.data
                res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
                res.write(genOcorrencias_Actors(ocorrencias))
                res.end()
            })
            .catch(erro => {
                res.writeHead(500, {'Content-Type': 'text/html; charset=utf-8'})
                res.write('<p>Ocorreu um erro: ' + erro + '</p>')
                res.end()
            })
    
    }
    else if(/\/atores\/(a)[0-9]+$/i.test(req.url)){
        id = req.url.split("/")[2]
        axios.get('http://localhost:3000/Actors/' + id)
            .then(resp => {
                ator = resp.data
                res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'})
                res.write(templates.actorPage(ator))
                res.end()
            })
            .catch(erro => {
                res.writeHead(504, {'Content-Type': 'text/html; charset=utf-8'})
                res.write("<p>Não foi possível obter a informação do ator: " + id + "::" + erro + "</p>")
                res.end()
            })
    }     
    else if (req.url == '/w3.css'){
        fs.readFile('w3.css', (erro, dados) => {
            res.writeHead(200, {'Content-Type': 'text/css'})
            res.write(dados)
            res.end()
        })    
    }
    else{
        res.writeHead(400, {'Content-Type': 'text/html; charset=utf-8'})
        res.write('<p>Erro: Pedido não suportado</p>')
        res.write('<pre>' + req.url + '</pre>')
        res.end()
    }
    

}).listen(2702)

console.log('Servidor à escuta na porta 2702...')   